{"version":3,"file":"CustomMarkdownEmitter.test.js","sourceRoot":"","sources":["../../../src/markdown/test/CustomMarkdownEmitter.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport {\n  DocSection,\n  TSDocConfiguration,\n  DocPlainText,\n  StringBuilder,\n  DocParagraph,\n  DocSoftBreak,\n  DocLinkTag,\n  DocHtmlStartTag,\n  DocHtmlEndTag,\n  DocBlockTag\n} from '@microsoft/tsdoc';\n\nimport { CustomDocNodes } from '../../nodes/CustomDocNodeKind';\nimport { DocHeading } from '../../nodes/DocHeading';\nimport { DocEmphasisSpan } from '../../nodes/DocEmphasisSpan';\nimport { DocTable } from '../../nodes/DocTable';\nimport { DocTableRow } from '../../nodes/DocTableRow';\nimport { DocTableCell } from '../../nodes/DocTableCell';\nimport { CustomMarkdownEmitter } from '../CustomMarkdownEmitter';\nimport { ApiModel, ApiItem } from '@microsoft/api-extractor-model';\n\ntest('render Markdown from TSDoc', () => {\n  const configuration: TSDocConfiguration = CustomDocNodes.configuration;\n\n  const output: DocSection = new DocSection({ configuration });\n\n  output.appendNodes([\n    new DocHeading({ configuration, title: 'Simple bold test' }),\n    new DocParagraph({ configuration }, [\n      new DocPlainText({ configuration, text: 'This is a ' }),\n      new DocEmphasisSpan({ configuration, bold: true }, [new DocPlainText({ configuration, text: 'bold' })]),\n      new DocPlainText({ configuration, text: ' word.' })\n    ])\n  ]);\n\n  output.appendNodes([\n    new DocHeading({ configuration, title: 'All whitespace bold' }),\n    new DocParagraph({ configuration }, [\n      new DocEmphasisSpan({ configuration, bold: true }, [new DocPlainText({ configuration, text: '  ' })])\n    ])\n  ]);\n\n  output.appendNodes([\n    new DocHeading({ configuration, title: 'Newline bold' }),\n    new DocParagraph({ configuration }, [\n      new DocEmphasisSpan({ configuration, bold: true }, [\n        new DocPlainText({ configuration, text: 'line 1' }),\n        new DocSoftBreak({ configuration }),\n        new DocPlainText({ configuration, text: 'line 2' })\n      ])\n    ])\n  ]);\n\n  output.appendNodes([\n    new DocHeading({ configuration, title: 'Newline bold with spaces' }),\n    new DocParagraph({ configuration }, [\n      new DocEmphasisSpan({ configuration, bold: true }, [\n        new DocPlainText({ configuration, text: '  line 1  ' }),\n        new DocSoftBreak({ configuration }),\n        new DocPlainText({ configuration, text: '  line 2  ' }),\n        new DocSoftBreak({ configuration }),\n        new DocPlainText({ configuration, text: '  line 3  ' })\n      ])\n    ])\n  ]);\n\n  output.appendNodes([\n    new DocHeading({ configuration, title: 'Adjacent bold regions' }),\n    new DocParagraph({ configuration }, [\n      new DocEmphasisSpan({ configuration, bold: true }, [new DocPlainText({ configuration, text: 'one' })]),\n      new DocEmphasisSpan({ configuration, bold: true }, [new DocPlainText({ configuration, text: 'two' })]),\n      new DocEmphasisSpan({ configuration, bold: true }, [\n        new DocPlainText({ configuration, text: ' three ' })\n      ]),\n      new DocPlainText({ configuration, text: '' }),\n      new DocEmphasisSpan({ configuration, bold: true }, [new DocPlainText({ configuration, text: 'four' })]),\n      new DocPlainText({ configuration, text: 'non-bold' }),\n      new DocEmphasisSpan({ configuration, bold: true }, [new DocPlainText({ configuration, text: 'five' })])\n    ])\n  ]);\n\n  output.appendNodes([\n    new DocHeading({ configuration, title: 'Adjacent to other characters' }),\n    new DocParagraph({ configuration }, [\n      new DocLinkTag({\n        configuration,\n        tagName: '@link',\n        linkText: 'a link',\n        urlDestination: './index.md'\n      }),\n      new DocEmphasisSpan({ configuration, bold: true }, [new DocPlainText({ configuration, text: 'bold' })]),\n      new DocPlainText({ configuration, text: 'non-bold' }),\n      new DocPlainText({ configuration, text: 'more-non-bold' })\n    ])\n  ]);\n\n  output.appendNodes([\n    new DocHeading({ configuration, title: 'Unknown block tag' }),\n    new DocParagraph({ configuration }, [\n      new DocBlockTag({\n        configuration,\n        tagName: '@unknown'\n      }),\n      new DocEmphasisSpan({ configuration, bold: true }, [new DocPlainText({ configuration, text: 'bold' })]),\n      new DocPlainText({ configuration, text: 'non-bold' }),\n      new DocPlainText({ configuration, text: 'more-non-bold' })\n    ])\n  ]);\n\n  output.appendNodes([\n    new DocHeading({ configuration, title: 'Bad characters' }),\n    new DocParagraph({ configuration }, [\n      new DocEmphasisSpan({ configuration, bold: true }, [\n        new DocPlainText({ configuration, text: '*one*two*' })\n      ]),\n      new DocEmphasisSpan({ configuration, bold: true }, [\n        new DocPlainText({ configuration, text: 'three*four' })\n      ])\n    ])\n  ]);\n\n  output.appendNodes([\n    new DocHeading({ configuration, title: 'Characters that should be escaped' }),\n    new DocParagraph({ configuration }, [\n      new DocPlainText({ configuration, text: 'Double-encoded JSON: \"{ \\\\\"A\\\\\": 123}\"' })\n    ]),\n    new DocParagraph({ configuration }, [\n      new DocPlainText({ configuration, text: 'HTML chars: <script>alert(\"[You] are #1!\");</script>' })\n    ]),\n    new DocParagraph({ configuration }, [new DocPlainText({ configuration, text: 'HTML escape: &quot;' })]),\n    new DocParagraph({ configuration }, [\n      new DocPlainText({ configuration, text: '3 or more hyphens: - -- --- ---- ----- ------' })\n    ])\n  ]);\n\n  output.appendNodes([\n    new DocHeading({ configuration, title: 'HTML tag' }),\n    new DocParagraph({ configuration }, [\n      new DocHtmlStartTag({ configuration, name: 'b' }),\n      new DocPlainText({ configuration, text: 'bold' }),\n      new DocHtmlEndTag({ configuration, name: 'b' })\n    ])\n  ]);\n\n  output.appendNodes([\n    new DocHeading({ configuration, title: 'Table' }),\n    new DocTable(\n      {\n        configuration,\n        headerTitles: ['Header 1', 'Header 2']\n      },\n      [\n        new DocTableRow({ configuration }, [\n          new DocTableCell({ configuration }, [\n            new DocParagraph({ configuration }, [new DocPlainText({ configuration, text: 'Cell 1' })])\n          ]),\n          new DocTableCell({ configuration }, [\n            new DocParagraph({ configuration }, [new DocPlainText({ configuration, text: 'Cell 2' })])\n          ])\n        ])\n      ]\n    )\n  ]);\n\n  const stringBuilder: StringBuilder = new StringBuilder();\n  const apiModel: ApiModel = new ApiModel();\n  const markdownEmitter: CustomMarkdownEmitter = new CustomMarkdownEmitter(apiModel);\n  markdownEmitter.emit(stringBuilder, output, {\n    contextApiItem: undefined,\n    onGetFilenameForApiItem: (apiItem: ApiItem) => {\n      return '#';\n    }\n  });\n\n  expect(stringBuilder).toMatchSnapshot();\n});\n"]}